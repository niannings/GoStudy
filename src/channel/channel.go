package main

import "fmt"

/*
	# 通道
	## 基本概念
	1. 通道（channel）是用来传递数据的一个数据结构。
	2. 通道可用于两个 goroutine 之间通过传递一个指定类型的值来同步运行和通讯。操作符 <- 用于指定通道的方向，发送或接收。如果未指定方向，则为双向通道。
	ch <- v    	// 把 v 发送到通道 ch
	v := <-ch  	// 从 ch 接收数据
				// 并把值赋给 v
	## 声明一个通道
	我们使用chan关键字即可，通道在**使用前必须先创建**：
	ch := make(chan int)

	*注意：默认情况下，通道是不带缓冲区的。发送端发送数据，同时必须又接收端相应的接收数据。*

	## 通道缓冲区
	设置缓冲区
	ch := make(chan int, 100)
	带缓冲区的通道允许发送端的数据发送和接收端的数据获取处于**异步**状态，就是说发送端发送的数据可以放在缓冲区里面，可以等待接收端去获取数据，而不是立刻需要接收端去获取数据。
	不过由于缓冲区的大小是有限的，所以还是必须有接收端来接收数据的，否则缓冲区一满，数据发送端就无法再发送数据了。

	*注意：如果通道不带缓冲，发送方会阻塞直到接收方从通道中接收了值。如果通道带缓冲，发送方则会阻塞直到发送的值被拷贝到缓冲区内；
	如果缓冲区已满，则意味着需要等待直到某个接收方获取到一个值。接收方在有值可以接收之前会一直阻塞。*

	## 遍历通道与关闭通道
	Go 通过 range 关键字来实现遍历读取到的数据，类似于与数组或切片。格式如下：
	v, ok := <-ch
	如果通道接收不到数据后 ok 就为 false，这时通道就可以使用 close() 函数来关闭。
	被关闭的信道会禁止数据流入, 是只读的。我们仍然可以从关闭的信道中取出数据，但是不能再写入数据了。

	## 死锁
	1. 从无缓冲信道取数据，必须要有数据流进来才可以，否则当前线阻塞
	2. 数据流入无缓冲信道, 如果没有其他goroutine来拿走这个数据，那么当前线阻塞
	### 如何解决
	最简单的，把没取走的数据取走，没放入的数据放入， 因为无缓冲信道不能承载数据，那么就赶紧拿走！
	另一个解决办法是缓冲信道。只要不超出缓冲区大小就不会阻塞
*/

func sum(s []int, c chan int) {
	sum := 0
	for _, v := range s {
		sum += v
	}
	c <- sum // 把 sum 发送到通道 c
}

func fibonacci(n int, c chan int) {
	x, y := 0, 1
	for i := 0; i < n; i++ {
		c <- x
		x, y = y, x+y
	}
	// 关闭通道
	close(c)
}

var ch2 chan int = make(chan int)

func foo(id int) { //id: 这个routine的标号
	ch2 <- id
}

func main() {
	s := []int{7, 2, 8, -9, 4, 0}

	c := make(chan int)
	go sum(s[:len(s)/2], c)
	go sum(s[len(s)/2:], c)
	x, y := <-c, <-c // 从通道 c 中接收

	fmt.Println(x, y, x+y)

	// 无缓冲信道的数据进出顺序
	// 开启5个routine
	for i := 0; i < 5; i++ {
		go foo(i)
	}

	println("\n--------")
	// 取出信道中的数据
	/*
		可以看出，每次打印出不同的序列
	*/
	for i := 0; i < 5; i++ {
		fmt.Print(<-ch2)
	}
	println("\n--------")

	// 通道缓冲区
	// 这里我们定义了一个可以存储整数类型的带缓冲通道
	// 缓冲区大小为2
	ch := make(chan int, 2)

	// 因为 ch 是带缓冲的通道，我们可以同时发送两个数据
	// 而不用立刻需要去同步读取数据
	ch <- 1
	ch <- 2 // 此时缓冲区已满
	// ch <- 3 // 如果再发送数据，这程序发生死锁：all goroutines are asleep - deadlock!

	// 获取这两个数据
	fmt.Println(<-ch)
	fmt.Println(<-ch)

	// 遍历通道与关闭通道
	println()
	cch := make(chan int, 10)
	go fibonacci(cap(cch), cch)
	// range 函数遍历每个从通道接收到的数据，因为 c 在发送完 10 个
	// 数据之后就关闭了通道，所以这里我们 range 函数在接收到 10 个数据
	// 之后就结束了。如果上面的 c 通道不关闭，那么 range 函数就不
	// 会结束，从而在接收第 11 个数据的时候就阻塞了。
	// cch <- 100
	// close(cch) // 通道何时关闭 for range 何时结束
	for i := range cch {
		fmt.Println(i)
	}
}
